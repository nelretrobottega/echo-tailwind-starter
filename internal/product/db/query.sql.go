// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  title, description, img, size, size_eu, size_us, price, sex, kind, created_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
)
RETURNING id, created_at, title, description, img, size, size_us, size_eu, price, sex, kind
`

type CreateProductParams struct {
	Title       string
	Description string
	Img         string
	Size        int32
	SizeEu      pgtype.Int4
	SizeUs      pgtype.Int4
	Price       pgtype.Numeric
	Sex         pgtype.Int4
	Kind        pgtype.Int4
	CreatedAt   pgtype.Timestamp
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Title,
		arg.Description,
		arg.Img,
		arg.Size,
		arg.SizeEu,
		arg.SizeUs,
		arg.Price,
		arg.Sex,
		arg.Kind,
		arg.CreatedAt,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Title,
		&i.Description,
		&i.Img,
		&i.Size,
		&i.SizeUs,
		&i.SizeEu,
		&i.Price,
		&i.Sex,
		&i.Kind,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, created_at, title, description, img, size, size_us, size_eu, price, sex, kind FROM products
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRow(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Title,
		&i.Description,
		&i.Img,
		&i.Size,
		&i.SizeUs,
		&i.SizeEu,
		&i.Price,
		&i.Sex,
		&i.Kind,
	)
	return i, err
}

const getProductByTitle = `-- name: GetProductByTitle :one
SELECT id, created_at, title, description, img, size, size_us, size_eu, price, sex, kind FROM products
WHERE title = $1 LIMIT 1
`

func (q *Queries) GetProductByTitle(ctx context.Context, title string) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByTitle, title)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Title,
		&i.Description,
		&i.Img,
		&i.Size,
		&i.SizeUs,
		&i.SizeEu,
		&i.Price,
		&i.Sex,
		&i.Kind,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT id, created_at, title, description, img, size, size_us, size_eu, price, sex, kind FROM products
WHERE id > $1 LIMIT $2
`

type GetProductsParams struct {
	ID    int64
	Limit int32
}

func (q *Queries) GetProducts(ctx context.Context, arg GetProductsParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProducts, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Title,
			&i.Description,
			&i.Img,
			&i.Size,
			&i.SizeUs,
			&i.SizeEu,
			&i.Price,
			&i.Sex,
			&i.Kind,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsBySize = `-- name: GetProductsBySize :many
SELECT id, created_at, title, description, img, size, size_us, size_eu, price, sex, kind FROM products
WHERE size = $1 OR size_eu = $2 OR size_us = $3
`

type GetProductsBySizeParams struct {
	Size   int32
	SizeEu pgtype.Int4
	SizeUs pgtype.Int4
}

func (q *Queries) GetProductsBySize(ctx context.Context, arg GetProductsBySizeParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsBySize, arg.Size, arg.SizeEu, arg.SizeUs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Title,
			&i.Description,
			&i.Img,
			&i.Size,
			&i.SizeUs,
			&i.SizeEu,
			&i.Price,
			&i.Sex,
			&i.Kind,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsFromDate = `-- name: GetProductsFromDate :many
SELECT id, created_at, title, description, img, size, size_us, size_eu, price, sex, kind FROM products
WHERE created_at >= $1
`

func (q *Queries) GetProductsFromDate(ctx context.Context, createdAt pgtype.Timestamp) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsFromDate, createdAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Title,
			&i.Description,
			&i.Img,
			&i.Size,
			&i.SizeUs,
			&i.SizeEu,
			&i.Price,
			&i.Sex,
			&i.Kind,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
